# Default RPC and API endpoints
birdeye_api_key = "YOUR_BIRDEYE_KEY"
solana_rpc_url = "https://api.mainnet-beta.solana.com"
dex_base_url = "https://dex.example/api"
dex_testnet_url = "https://dex.testnet/api"
orca_api_url = "https://api.orca.so"
raydium_api_url = "https://api.raydium.io"
phoenix_api_url = "https://api.phoenix.trade"
meteora_api_url = "https://api.meteora.ag"
orca_ws_url = ""
raydium_ws_url = ""
jupiter_ws_url = ""
phoenix_ws_url = ""
meteora_ws_url = ""
order_book_ws_url = ""

depth_service = true  # start the Rust depth_service automatically when true
# IPC paths for the depth_service (change if running on another host)
# DEPTH_SERVICE_SOCKET = "/tmp/depth_service.sock"
# DEPTH_MMAP_PATH = "/tmp/depth_service.mmap"
# depth_update_threshold = 0.0  # minimum relative change before broadcasting
# depth_min_send_interval = 100 # min interval between snapshots in ms
compress_events = true  # set to false to disable protobuf compression
use_depth_stream = true  # set to false to disable depth-stream IPC
use_depth_feed = false  # deprecated, depth snapshots are sent over websocket
use_rust_exec = true  # set to false to execute swaps in Python
use_service_exec = true  # set to false to bypass depth_service execution
use_service_route = true  # set to false to compute routes in Python
orca_dex_url = "https://dex.orca.so"
raydium_dex_url = "https://dex.raydium.io"
phoenix_dex_url = "https://dex.phoenix.trade"
meteora_dex_url = "https://dex.meteora.ag"
metrics_base_url = "https://api.example.com"
metrics_url = ""
news_feeds = "https://news.example.com/rss"
twitter_feeds = ""
discord_feeds = ""
dex_listing_ws_url = "wss://dex.example/ws"
discovery_method = "websocket"
tick_dataset = "datasets/sample_ticks.json"  # sample tick history for AlienGlyphAgent and AtlanteanWaveAgent

risk_tolerance = 1.0
max_allocation = 1.0
risk_multiplier = 1.0
min_portfolio_value = 20.0
dex_priorities = "orca,raydium,jupiter"
dex_fees = "{}"
max_flash_amount = 0.1
flash_loan_ratio = 0.1
use_mev_bundles = true
max_hops = 3
path_algorithm = "graph"
use_gnn_routing = false
gnn_model_path = "route_gnn.pt"
jito_rpc_url = ""
jito_auth = ""
jito_ws_url = ""
jito_ws_auth = ""
event_bus_url = ""
broker_url = ""

# Enable every built-in agent for maximum exposure
agents = [
    "simulation",
    "conviction",
    "arbitrage",
    "exit",
    "execution",
    "memory",
    "discovery",
    "reinforcement",
    "portfolio",
    "portfolio_manager",
    "portfolio_optimizer",
    "hedging",
    "dqn",
    "ppo",
    "sac",
    "opportunity_cost",
    "meta_conviction",
    "ramanujan",
    "emotion",
    "vanta",
    "inferna",
    "crossdex_rebalancer",
    "mev_sandwich",
    "flashloan_sandwich",
]

# Dynamically adjust weights based on agent ROI
dynamic_weights = true
weight_step = 0.05
use_attention_swarm = false
attention_swarm_model = "attention_swarm.pt"
evolve_interval = 1
mutation_threshold = 0.0

[agent_weights]
simulation = 1.0
conviction = 1.0
arbitrage = 1.0
exit = 1.0
execution = 1.0
memory = 1.0
discovery = 1.0
reinforcement = 1.0
portfolio = 1.0
portfolio_manager = 1.0
hedging = 1.0
dqn = 1.0
ppo = 1.0
sac = 1.0
opportunity_cost = 1.0
meta_conviction = 1.0
ramanujan = 1.0
emotion = 1.0
vanta = 1.0
inferna = 1.0
portfolio_optimizer = 1.0
crossdex_rebalancer = 1.0
flashloan_sandwich = 1.0

# RL auto-training
rl_auto_train = true
rl_tune_interval = 1800
regime_weight = 1.0
rl_dynamic_workers = true
# Enable FAISS GPU index for faster memory search
gpu_memory_index = false
