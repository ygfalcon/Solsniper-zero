import json
import os
from solders.keypair import Keypair

# Older versions of ``solders`` do not expose ``to_bytes`` which our tests rely
# on. Provide a backwards compatible shim.
if not hasattr(Keypair, "to_bytes"):
    def _to_bytes(self) -> bytes:  # pragma: no cover - shim for old versions
        return bytes(self.to_bytes_array())

    Keypair.to_bytes = _to_bytes  # type: ignore[attr-defined]


    

if not hasattr(Keypair, "to_bytes_array"):
    def _to_bytes_array(self) -> list[int]:  # pragma: no cover - shim for old versions
        return list(self.to_bytes())

    Keypair.to_bytes_array = _to_bytes_array  # type: ignore[attr-defined]


KEYPAIR_DIR = os.getenv("KEYPAIR_DIR", "keypairs")
ACTIVE_KEYPAIR_FILE = os.path.join(KEYPAIR_DIR, "active")
os.makedirs(KEYPAIR_DIR, exist_ok=True)


def load_keypair(path: str) -> Keypair:
    """Load a Solana ``Keypair`` from a JSON file generated by ``solana-keygen``.

    Parameters
    ----------
    path:
        Path to the keypair JSON file. It should contain an array of integers.
    """
    with open(path, "r") as f:
        data = json.load(f)
    if not isinstance(data, list):
        raise ValueError("Invalid keypair file")
    secret = bytes(data)
    return Keypair.from_bytes(secret)


def list_keypairs() -> list[str]:
    """Return the names of all saved keypairs."""
    return [
        f[:-5]
        for f in os.listdir(KEYPAIR_DIR)
        if f.endswith(".json") and os.path.isfile(os.path.join(KEYPAIR_DIR, f))
    ]


def save_keypair(name: str, data: list[int]) -> None:
    """Persist a keypair under ``name``."""
    path = os.path.join(KEYPAIR_DIR, name + ".json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f)


def select_keypair(name: str) -> None:
    """Mark the named keypair as active."""
    path = os.path.join(KEYPAIR_DIR, name + ".json")
    if not os.path.exists(path):
        raise FileNotFoundError(path)
    with open(ACTIVE_KEYPAIR_FILE, "w", encoding="utf-8") as f:
        f.write(name)


def get_active_keypair_name() -> str | None:
    try:
        with open(ACTIVE_KEYPAIR_FILE, "r", encoding="utf-8") as f:
            return f.read().strip() or None
    except FileNotFoundError:
        return None


def load_selected_keypair() -> Keypair | None:
    name = get_active_keypair_name()
    if not name:
        return None
    path = os.path.join(KEYPAIR_DIR, name + ".json")
    return load_keypair(path)
